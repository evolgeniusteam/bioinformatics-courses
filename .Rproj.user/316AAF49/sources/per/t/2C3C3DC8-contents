---
title: "序列预处理：trimming和QC"
subtitle: "HUST Bioinformatics course series"
author: "Wei-Hua Chen (CC BY-NC 4.0)"
institute: "HUST, China"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  html_document:
    toc: true
    toc_float: true
    highlight:  pygment
  github_document:
    toc: true
    toc_depth: 2
---


```{r setup, include=FALSE }
knitr::opts_chunk$set(
  echo = TRUE,
  class.source = "numberLines lineAnchors", 
  class.output = c("numberLines lineAnchors chunkout") 
)

```

## 学习要求

* 操作系统为 Linux (Ubuntu或类似版本)，或 MacOS
* 具有Linux系统操作基础

## 1. 使用 ``` trimmomatic ``` 程序去除```接头、低质量碱基和短序列```

```rawdata``` 在使用之前，需要去除```接头(adaptors)```，```低质量```和```短序列```。这些任务都可由 ``` trimmomatic ``` 程序完成。

### 1.1. 下载``` trimmomatic ``` 程序

* 在浏览器中输入地址： http://www.usadellab.org/cms/?page=trimmomatic

* 选择并最新版的 ``` binary ``` 文件下载。目前最新版为 ``` Version 0.39 ``` （2019年10月）

* 下载文件为 ``` .zip  ```  格式，可用 ``` unzip ``` 命令解压。会得到：

```trimmomatic-0.39.jar``` 文件和 ``` adaptors/ ``` 目录。

### 1.2. 处理双端数据 (pair-end or PE data)

假设双端序列文件分别为（经gzip压缩）：

```{sh eval=F}
SRR12345_1.fq.gz
SRR12345_2.fq.gz
```

其中```SRR12345_1.fq.gz```又称为  ``` forward ``` 文件，``` SRR12345_2.fq.gz ``` 又称为 ``` reverse ``` 文件。详情见 [Illumina 官方说明](https://support.illumina.com/bulletins/2016/04/fastq-files-explained.html)。

``` trimmomatic ``` 命令如下：

```{sh eval=F}
java -jar /path/to/trimmomatic-0.39.jar PE \
    SRR12345_1.fq.gz SRR12345_2.fq.gz \
    SRR12345_1_paired.trimmed.fq.gz SRR12345_1_unpaired.trimmed.fq.gz \
    SRR12345_2_paired.trimmed.fq.gz SRR12345_2_unpaired.trimmed.fq.gz \
    ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:2:keepBothReads LEADING:3 TRAILING:3 MINLEN:36
```

说明：

* line 1, ``` /path/to/trimmomatic-0.39.jar ```  ： 在运行时需要被真实的 ``` trimmomatic-0.39.jar ``` 的位置替代，比如它在磁盘上的位置为： ``` /home/wchen/Downloads/Trimmomatic-0.39/trimmomatic-0.39.jar ``` ，那么相应的命令为：

``` java -jar /home/wchen/Downloads/Trimmomatic-0.39/trimmomatic-0.39.jar ```

* line 1, ``` PE ```  ：表示输入序列是双端序列

* line 2, ``` SRR12345_1.fq.gz SRR12345_2.fq.gz  ``` : 两个输入文件，可以是压缩格式（.gz），也可以非压缩

* line 3, ``` SRR12345_1_paired.trimmed.fq.gz SRR12345_1_unpaired.trimmed.fq.gz ``` : ```SRR12345_1.fq.gz```文件 trim 后的两个输出。

其中仍然成对的序列存入 ``` SRR12345_1_paired.trimmed.fq.gz ```，不成对的存入 ```  SRR12345_1_unpaired.trimmed.fq.gz  ```。后者是指对应的```reverse```序列trim后不符合**筛选标准**而变成 ``` orphan reads ``` 。

文件名可以随意取名；以 ```.gz``` 以结尾时，输出压缩格式，否则输出 ``` plain text ``` 普通文本格式。

* line 4, ``` SRR12345_2_paired.trimmed.fq.gz SRR12345_2_unpaired.trimmed.fq.gz ``` : ```SRR12345_2.fq.gz```文件 trim 后的两个输出。

** 注意 ** ：  通常trim后成对合格的reads，即： ``` SRR12345_1_paired.trimmed.fq.gz  ``` ``` SRR12345_2_paired.trimmed.fq.gz ``` 两个文件才会用于后期分析。

* line 5, ``` TruSeq3-PE.fa ``` 接头文件；此文件不在当前目录下时，需要指定路径，比如： 

``` ILLUMINACLIP:adapters/TruSeq3-PE.fa:2:30:10:2:keepBothReads ```

其它接头文件在 ``` adapters/ ``` 目录下。

* line 5， 详解如下：

  * Remove adapters (ILLUMINACLIP:TruSeq3-PE.fa:2:30:10)
  * Remove leading low quality or N bases (below quality 3) (LEADING:3)
  * Remove trailing low quality or N bases (below quality 3) (TRAILING:3)
  * Scan the read with a 4-base wide sliding window, cutting when the average quality per base drops below 15 (SLIDINGWINDOW:4:15)
  * Drop reads below the 36 bases long (MINLEN:36)；去接口和低质量碱基后，如果长度小于36，则去除。**注意** 这个长度通常限定在测序长度的一半。比如：读长为200bp时，```MINLEN:100```甚至更长比较合适。

### 1.3. 处理单端序列 （```single end, SE``` 序列 ）

假设单端序列文件为： ```SRR456789.fq.gz```：

```{sh eval=FALSE}
java -jar trimmomatic-0.35.jar SE \
     -phred33 \
     SRR456789.fq.gz \
     SRR456789.trimmed.fq.gz \
     ILLUMINACLIP:TruSeq3-SE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
```

**说明**：

* line 1, ``` SE ``` : 表示单端

* line 2, ``` -phred33 ``` : 表示质量文件为 ``` phred33 ``` ，默认值

* line 5，``` TruSeq3-SE.fa ``` 接头文件；此文件不在当前目录下时，需要指定路径，比如： 

``` ILLUMINACLIP:adapters/TruSeq3-SE.fa:2:30:10:2:keepBothReads ```

其它接头文件在 ``` adapters/ ``` 目录下。

* line 5  的其它参数意义见上面双端的解释。

## 2. FASTQC工具进行序列质量评估

FASTQC是一款基于JAVA的序列质量评估程序。从测序公司拿到```原始数据```以后，可以用它评价测序质量。

用```trimmomatic```去除接头和低质量序列后，即得到```clean data```，也可以再次用它评估质量。

通常```trimmomatic```处理后评估质量会有所提高，但也有一些特殊情况，依不同数据类型而不同。

### 2.1. 可选部分：安装JAVA

大多数Linux和Mac操作系统都自带Java程序。如果在 Ubuntu ```terminal ``` 终端程序中运行 ``` java ``` ，出现以下提示时，表示需要安装 Java：

```{sh eval=F}
Command 'java' not found, but can be installed with:

sudo apt install default-jre            
sudo apt install openjdk-11-jre-headless
sudo apt install openjdk-8-jre-headless 
```

按上面提示进行安装即可，比如：

```{sh eval=F}
sudo apt install openjdk-11-jre-headless
```

成功后，运行 ```  java -version ``` 命令 ，会得到以下或类似结果：

```{sh eval=F}
java version "1.8.0_111"
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
```

Mac的安装详见： https://java.com/en/download/help/mac_install.xml

### 2.2. FASTAQC安装

FASTAQC的 mac 版本安装比较简单，只需要去官网：https://www.bioinformatics.babraham.ac.uk/projects/download.html#fastqc 下载 Mac 版本 (Mac DMG image)，安装后可在 ``` Applications ``` 目录中找到可视化运行版本。

而在 Linux 版本中，可以在解压后的 ``` FastQC/ ``` 目录下找到 ``` fastqc ``` 文件。

用以下```terminal```命令将``` FastQC/ ```目录加入```$PATH```系统变量（只需要运行一次）：

```{sh eval=F}
echo 'export PATH=/path/to/FastQC:$PATH' >>~/.bashrc
source ~/.bashrc
```

**注意** 将 ``` /path/to/FastQC ``` 改为 ``` FastQC ``` 的真实位置。

完成后即可在任何目录下运行 ``` fastqc ```。

在 ``` terminal ``` 中运行 ：

``` fastqc -h ``` 

会得到帮助信息：

```{sh eval=F}

            FastQC - A high throughput sequence QC analysis tool

SYNOPSIS

	fastqc seqfile1 seqfile2 .. seqfileN

    fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam]
           [-c contaminant file] seqfile1 .. seqfileN

```

假设输入文件为：``` SRR12345.fq ```，则命令为： 

```{sh eval=F}
fastqc SRR12345.fq -o fastqc_output
```

将fastqc后的文件输出到```fastqc_outpput/```目录下，可以看到在该目录下生成了一个.html，该文件即为序列的分析结果，可用浏览器查看；另一个压缩文件是具体数据。

关于如何理解 fastqc 输出结果，请见以下在线文档：

* https://zhuanlan.zhihu.com/p/20731723

* http://www.bioinformatics.babraham.ac.uk/projects/fastqc/

